"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Handle_1 = __importDefault(require("../Handle/Handle"));
const utils_1 = require("../../utils");
const constants_1 = require("../../constants");
const Alpha_module_css_1 = __importDefault(require("./Alpha.module.css"));
const ColorPicker_module_css_1 = __importDefault(require("../ColorPicker/ColorPicker.module.css"));
function Alpha(props) {
    const { hue, alpha, saturation, lightness, value, spectrum, width: w, height: h, handleClasses, className, } = props;
    const dpi = window.devicePixelRatio || 1;
    const width = w * dpi;
    const height = h * dpi;
    const x = width * alpha;
    const canvasRef = React.useRef(null);
    const gradientColor = spectrum === "hsla"
        ? {
            h: hue,
            s: saturation,
            l: lightness || 0,
            a: 1,
        }
        : utils_1.formatColorBySpectrum({
            h: hue,
            s: saturation,
            v: value || 0,
            a: 1,
        }, "hsla");
    React.useEffect(() => {
        const currentContext = canvasRef.current
            ? canvasRef.current.getContext("2d")
            : null;
        if (currentContext) {
            currentContext.clearRect(0, 0, width, height);
            let gradient = currentContext.createLinearGradient(0, 0, width, 0);
            gradient.addColorStop(0, `hsla(${gradientColor.h}, ${gradientColor.s * 100}%, ${gradientColor.l * 100}%, 0%)`);
            gradient.addColorStop(1, `hsla(${gradientColor.h}, ${gradientColor.s * 100}%, ${gradientColor.l * 100}%, 100%)`);
            currentContext.fillStyle = gradient;
            currentContext.fillRect(0, 0, width, height);
        }
        return () => { };
    }, [hue, x, dpi, height, width, gradientColor]);
    return (React.createElement("div", { id: "alpha", className: `${constants_1.COLOR_PICKER_CLASSNAME} ${Alpha_module_css_1.default.container} ${ColorPicker_module_css_1.default.color_picker} ${className}` },
        React.createElement("canvas", { style: {
                width: `${width / dpi}px`,
                height: `${height / dpi}px`,
            }, width: width, height: height, ref: canvasRef }),
        React.createElement(Handle_1.default, { className: handleClasses, hue: gradientColor.h, alpha: alpha, saturation: gradientColor.s, lightness: gradientColor.l, spectrumFormat: "hsla", x: x, y: height / 2 })));
}
exports.default = React.memo(Alpha);
