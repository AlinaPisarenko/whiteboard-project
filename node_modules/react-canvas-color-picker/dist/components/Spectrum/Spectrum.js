"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Handle_1 = __importDefault(require("../Handle/Handle"));
const utils_1 = require("../../utils");
const constants_1 = require("../../constants");
const Spectrum_module_css_1 = __importDefault(require("./Spectrum.module.css"));
const ColorPicker_module_css_1 = __importDefault(require("../ColorPicker/ColorPicker.module.css"));
function Spectrum(props) {
    const { spectrumFormat, hue, saturation, value = 1, lightness = 1, width: w, height: h, className, handleClasses, } = props;
    const dpi = window.devicePixelRatio || 1;
    const width = w * dpi;
    const height = h * dpi;
    const x = width * saturation;
    const yInput = spectrumFormat === "hsva" ? value : lightness;
    const y = height * utils_1.mapRange(yInput, 0, 1, 1, 0);
    const canvasRef = React.useRef(null);
    React.useEffect(() => {
        const currentContext = canvasRef.current
            ? canvasRef.current.getContext("2d")
            : null;
        if (currentContext) {
            if (spectrumFormat === "hsva") {
                currentContext.fillStyle = `hsl(${hue}, 100%, 50%)`;
                currentContext.fillRect(0, 0, width, height);
                let whiteGradient = currentContext.createLinearGradient(0, 0, width, 0);
                whiteGradient.addColorStop(0, "hsla(0,0%,100%, 100%)");
                whiteGradient.addColorStop(1, "hsla(0,0%,100%, 0%)");
                currentContext.fillStyle = whiteGradient;
                currentContext.fillRect(0, 0, width, height);
                let blackGradient = currentContext.createLinearGradient(0, height, 0, 0);
                blackGradient.addColorStop(0, "hsla(0,0%,0%, 100%)");
                blackGradient.addColorStop(1, "hsla(0,0%,0%, 0%");
                currentContext.fillStyle = blackGradient;
                currentContext.fillRect(0, 0, width, height);
            }
            else {
                for (let row = 0; row < height; row++) {
                    const gradient = currentContext.createLinearGradient(0, 0, width, 0);
                    gradient.addColorStop(0, `hsl(${hue}, 0%, ${(1 - row / height) * 100}%)`);
                    gradient.addColorStop(1, `hsl(${hue}, 100%, ${(1 - row / height) * 100}%)`);
                    currentContext.fillStyle = gradient;
                    currentContext.fillRect(0, row, width, 1);
                }
            }
        }
    }, [hue, width, height, spectrumFormat]);
    return (React.createElement("div", { id: spectrumFormat === "hsva" ? "saturation-value" : "saturation-lightness", className: `${constants_1.COLOR_PICKER_CLASSNAME} ${Spectrum_module_css_1.default.container} ${ColorPicker_module_css_1.default.color_picker} ${className}` },
        React.createElement("canvas", { style: {
                width: `${width / dpi}px`,
                height: `${height / dpi}px`,
            }, width: width, height: height, ref: canvasRef }),
        React.createElement(Handle_1.default, { spectrumFormat: spectrumFormat, className: handleClasses, hue: hue, saturation: saturation, value: value, lightness: lightness, x: x, y: y })));
}
exports.default = React.memo(Spectrum);
